/* global baseServicesUrl clearInterval MaterialUI moment React ReactDOM setInterval */

const capitalize = (s) => {
	if (typeof s !== 'string') return ''
	return s.charAt(0).toUpperCase() + s.slice(1)
}


function useInterval(callback, delay) {
	const savedCallback = React.useRef();

	// Remember the latest callback.
	React.useEffect(() => {
		savedCallback.current = callback;
	}, [callback]);

	// Set up the interval.
	React.useEffect(() => {
		function tick() {
			savedCallback.current();
		}
		if (delay !== null) {
			let id = setInterval(tick, delay);
			return () => clearInterval(id);
		}
	}, [delay]);
} // useInterval


/* eslint-disable no-unused-vars */
const {
	Box,
	Button,
	colors,
	CircularProgress,
	createMuiTheme,
	CssBaseline,
	Table,
	TableBody,
	TableCell,
	TableContainer,
	TableHead,
	TableRow,
	ThemeProvider,
	Typography
} = MaterialUI;
/* eslint-enable no-unused-vars */


const theme = createMuiTheme({
	palette: {
		primary: {
			main: '#556cd6'
		},
		secondary: {
			main: '#19857b'
		},
		error: {
			main: colors.red.A400
		},
		background: {
			default: '#fff'
		}
	}
});


// eslint-disable-next-line no-unused-vars
const CircularProgressWithLabel = (props) => <Box position="relative" display="inline-flex">
	<CircularProgress variant="determinate" {...props} />
	<Box
		top={0}
		left={0}
		bottom={0}
		right={0}
		position="absolute"
		display="flex"
		alignItems="center"
		justifyContent="center"
	>
		<Typography variant="caption" component="div" color="textSecondary">{`${Math.round(
			props.value,
		)}%`}</Typography>
	</Box>
</Box>;


function App({theme}) { // eslint-disable-line no-unused-vars

	const [licenseValid, setLicenseValid] = React.useState(false);
	const [sitesConfigs, setSitesConfigs] = React.useState({});
	const [stoppableTasks, setStoppableTasks] = React.useState({});
	const [taskList, setTaskList] = React.useState([]);

	useInterval(() => {
		fetch(`${baseServicesUrl}/licenseValid`)
			.then(response => response.json())
			.then(data => {
				//console.log(data);
				setLicenseValid(data.licenseValid);
			});
		fetch(`${baseServicesUrl}/sitesConfigs`)
			.then(response => response.json())
			.then(data => {
				//console.log(data);
				setSitesConfigs(data);
			});
		fetch(`${baseServicesUrl}/stoppableTasks`)
			.then(response => response.json())
			.then(data => {
				//console.log(data);
				setStoppableTasks(data);
			});
		fetch(`${baseServicesUrl}/listTasks`)
			.then(response => response.json())
			.then(data => {
				//console.log(data);
				setTaskList(data);
			});
		//console.log(baseServicesUrl);
	}, 1000);

	const boolMoreThanOne = Object.keys(sitesConfigs).length > 1 ||
	(
		Object.keys(sitesConfigs).length === 1 &&
		Object.keys(sitesConfigs[Object.keys(sitesConfigs)[0]].imports).length > 1
	);

	return (<React.Fragment>
		{boolMoreThanOne
			? (
				<div>
					{
						Object.keys(stoppableTasks).length
							? null
							: <React.Fragment>
								<Button disabled={!licenseValid} onClick={() => {
									fetch('?resume=true&site=_all', {
										method: 'POST',
										headers: {
											'Content-Type':	'application/json'
										}
									})
								}}
								style={{marginRight:theme.spacing(1)}}
								variant="contained">Refresh all configured FotoWare sites</Button>
								<Button disabled={!licenseValid} onClick={() => {
									fetch('?resume=false&site=_all', {
										method: 'POST',
										headers: {
											'Content-Type':	'application/json'
										}
									})
								}} variant="contained">Full sync all configured FotoWare sites</Button>
							</React.Fragment>
					}
				</div>
			)
			: null
		}
		{Object.keys(sitesConfigs).map((site, i) =>
			Object.keys(sitesConfigs[site].imports).map((importName, j) => <div key={`${i}_${j}`}>
				{(stoppableTasks[site] && stoppableTasks[site][importName])
					? <Button disabled={!licenseValid} onClick={() => {
						fetch(`?importName=${importName}&stop=true&site=${site}&taskNodeId=${stoppableTasks[site][importName]}`, {
							method: 'POST',
							headers: {
								'Content-Type':	'application/json'
							}
						})
					}} variant="contained">{`Stop ${capitalize(site)} ${capitalize(importName)}`}</Button>
					: <React.Fragment>
						<Button disabled={!licenseValid} onClick={() => {
							fetch(`?importName=${importName}&resume=true&site=${site}`, {
								method: 'POST',
								headers: {
									'Content-Type':	'application/json'
								}
							})
						}}
						style={{marginRight:theme.spacing(1)}}
						variant="contained">{`Refresh ${capitalize(site)} ${capitalize(importName)}`}</Button>
						<Button disabled={!licenseValid} onClick={() => {
							fetch(`?importName=${importName}&resume=false&site=${site}`, {
								method: 'POST',
								headers: {
									'Content-Type':	'application/json'
								}
							})
						}} variant="contained">{`Full sync ${capitalize(site)} ${capitalize(importName)}`}</Button>
					</React.Fragment>}
			</div>)
		)
		}
		<Typography variant="h2" gutterBottom>Tasks</Typography>
		<TableContainer>
			<Table>
				<TableHead>
					<TableRow>
						<TableCell>State</TableCell>
						<TableCell>Info</TableCell>
						<TableCell>StartTime</TableCell>
						<TableCell>Eta</TableCell>
						<TableCell>Remaining</TableCell>
						<TableCell>Progress</TableCell>
					</TableRow>
				</TableHead>
				<TableBody>
					{taskList.map(({
						progress: {
							current,
							info,
							total
						},
						startTime: startTimeEnonic,
						state
					}, i) => {
						//console.log('total', total);
						//console.log('current', current);
						const remainingCount = total - current;
						//console.log('remainingCount', remainingCount);

						//console.log('startTimeEnonic', startTimeEnonic);
						const startDateObj = new Date(startTimeEnonic);
						//console.log('startDateObj', startDateObj);

						const now = Date.now(); // The number of milliseconds elapsed since January 1, 1970 00:00:00 UTC
						//console.log('now',now);

						const durationMs = now - startDateObj.getTime(); // in milliseconds
						//console.log('durationMs', durationMs); // ERROR

						const averageMs = current ? durationMs / current : durationMs;
						//console.log('averageMs', averageMs);

						const remainingMs = (remainingCount * averageMs);
						//console.log('remainingMs', remainingMs);

						const etaMs = now + remainingMs;
						//console.log('etaMs', etaMs);

						return <TableRow key={i}>
							<TableCell>{state}</TableCell>
							<TableCell>{info}</TableCell>
							<TableCell>{moment(startDateObj).format('YYYY-MM-DD HH:mm:ss')}</TableCell>
							<TableCell>{moment(new Date(etaMs)).format('YYYY-MM-DD HH:mm:ss')}</TableCell>
							<TableCell>{moment.utc(moment.duration(remainingMs).asMilliseconds()).format("HH:mm:ss")}</TableCell>
							<TableCell><CircularProgressWithLabel value={current/total*100} /></TableCell>
						</TableRow>;
					})}
				</TableBody>
			</Table>
		</TableContainer>
	</React.Fragment>);
}; // eslint-disable-line no-extra-semi


ReactDOM.render(
	<ThemeProvider theme={theme}>
		<CssBaseline />
		<App theme={theme}/>
	</ThemeProvider>,
	document.querySelector('#root')
);
